{"version":3,"sources":["components/Node.jsx","algorithms/dijkstra.js","components/Pathfinder.jsx","components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","isFinish","isStart","row","col","onMouseDown","onMouseUp","nodeType","onMouseEnter","className","id","isFinished","dijkstra","grid","startNode","finishNode","visitedNodeOrder","distance","unvisitedNodes","nodes","node","push","getNodes","length","sortNodesByDistance","closestNode","pop","Infinity","visited","updateUnvisitedNeighbors","sort","currentNode","nextNode","unvisitedNeighborNodes","neighbors","filter","neighbor","unvisitedNeighbors","previousNode","Pathfinder","useState","setGrid","algoRunning","setRunning","algoFinished","setFinished","isDown","isMouseDown","setMouseDown","START_NODE","setSTART_NODE","FINISH_NODE","setFINISH_NODE","useEffect","createGrid","createNode","isWall","currentRow","animateDijkstra","visitedNodePath","nodesShortestPath","i","setTimeout","animateShortestPath","document","getElementById","classList","add","Nodes","map","rowIdx","nodeIdx","handleMouseDown","handleMouseUp","key","renderRows","idx","onClick","shortestPathNodes","reverse","shortestPath","Navbar","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a9c02a0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Node(props) {\r\n\tconst { isFinish, isStart, row, col, onMouseDown, onMouseUp, onMouseEnter } = props;\r\n\tconst nodeType = isFinish ? ' finish-node' : isStart ? ' start-node' : '';\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={`node${nodeType}`}\r\n\t\t\tid={`${row}-${col}`}\r\n\t\t\tonMouseDown={(row, col, isFinished, isStart) => onMouseDown(row, col, isFinished, isStart)}\r\n\t\t\tonMouseUp={(row, col) => onMouseUp(row, col)}\r\n\t\t\t// onMouseEnter={(row, col) => onMouseEnter(row, col)}\r\n\t\t/>\r\n\t);\r\n}\r\n\r\nexport default Node;\r\n","//start node has a distance of 0 all other nodes are set to infinity\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodeOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.pop();\r\n    if (closestNode.distance === Infinity) return visitedNodeOrder;\r\n    closestNode.visited = true;\r\n    visitedNodeOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodeOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction getNodes(grid) {\r\n  const nodes = [];\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n//return all unvisited nodes in order of closest distance\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((currentNode, nextNode) => nextNode.distance - currentNode.distance)\r\n}\r\n\r\n//increment each neighboring node by 1 and set their previous node to current node\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighborNodes = unvisitedNeighbors(node, grid);\r\n  for (let neighbor of unvisitedNeighborNodes) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\n\r\n//find all neighboring nodes from given node\r\n//return only those that have not been visited\r\nfunction unvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1])\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n  return neighbors.filter(neighbor => !neighbor.visited);\r\n}\r\n\r\nexport function shortestPath(finishNode) {\r\n  const shortestPathNodes = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    shortestPathNodes.push(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n\r\n  return shortestPathNodes.reverse();\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport Node from \"./Node\";\r\nimport { dijkstra, shortestPath } from \"../algorithms/dijkstra.js\";\r\n\r\nimport \"./pathfinder.css\";\r\n\r\nconst Pathfinder = props => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [algoRunning, setRunning] = useState(true);\r\n  const [algoFinished, setFinished] = useState(false);\r\n  const [isMouseDown, setMouseDown] = useState({node: null, isDown: false});\r\n\r\n  const [START_NODE, setSTART_NODE] = useState({ row: 10, col: 9 });\r\n  const [FINISH_NODE, setFINISH_NODE] = useState({ row: 10, col: 40 });\r\n  \r\n  useEffect(() => {\r\n    createGrid();\r\n  }, [START_NODE, FINISH_NODE]);\r\n\r\n  const createNode = (row, col) => {\r\n    return {\r\n      col,\r\n      row,\r\n      isStart: row === START_NODE.row && col === START_NODE.col,\r\n      isFinish: row === FINISH_NODE.row && col === FINISH_NODE.col,\r\n      distance: Infinity,\r\n      visited: false,\r\n      isWall: false,\r\n      previousNode: null\r\n    };\r\n  };\r\n\r\n  const createGrid = () => {\r\n    const nodes = [];\r\n    for (let row = 0; row < 20; row++) {\r\n      let currentRow = [];\r\n      for (let col = 0; col < 50; col++) {\r\n        currentRow.push(createNode(row, col));\r\n      }\r\n      nodes.push(currentRow);\r\n    }\r\n    setGrid(nodes);\r\n  };\r\n\r\n  const resetGrid = () => {\r\n    setGrid([]);\r\n    setRunning(true);\r\n    setFinished(false);\r\n    setTimeout(() => createGrid(), 0);\r\n  };\r\n\r\n  const calculateDijkstra = () => {\r\n    if(!algoFinished){\r\n      setRunning(true);\r\n      setFinished(true);\r\n      const startNode = grid[START_NODE.row][START_NODE.col];\r\n      const finishNode = grid[FINISH_NODE.row][FINISH_NODE.col];\r\n      const visitedNodePath = dijkstra(grid, startNode, finishNode);\r\n      const nodesShortestPath = shortestPath(finishNode);\r\n      animateDijkstra(visitedNodePath, nodesShortestPath);\r\n    }\r\n  };\r\n\r\n  const animateDijkstra = (visitedNodePath, nodesShortestPath) => {\r\n    for (let i = 0; i <= visitedNodePath.length; i++) {\r\n      if (i === visitedNodePath.length) {\r\n        setTimeout(() => {\r\n          animateShortestPath(nodesShortestPath);\r\n        }, 12 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const { row, col } = visitedNodePath[i];\r\n        document.getElementById(`${row}-${col}`).classList.add(\"visited-node\");\r\n      }, 12 * i);\r\n    }\r\n  };\r\n\r\n  const animateShortestPath = nodesShortestPath => {\r\n    for (let i = 0; i < nodesShortestPath.length; i++) {\r\n      const { row, col } = nodesShortestPath[i];\r\n      document.getElementById(`${row}-${col}`).classList.add(\"shortest-path\");\r\n      setRunning(false);\r\n    }\r\n  };\r\n\r\n  const handleMouseDown = (row, col, isStart, isFinish) => {\r\n    if(!algoFinished){\r\n      if (isStart) {\r\n        setMouseDown({node: \"start\", isDown: true });\r\n        };\r\n      if(isFinish){\r\n        setMouseDown({node: 'finish', isDown: true});\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = (row, col) => {\r\n    if (isMouseDown.isDown) {\r\n      if (isMouseDown.node === 'start') {\r\n        setSTART_NODE({row, col});    \r\n      };\r\n      if (isMouseDown.node === 'finish') {\r\n        setFINISH_NODE({row,col});\r\n      };\r\n      setMouseDown({node: null, isDown: false});\r\n    }\r\n  };\r\n\r\n  // const handleMouseEnter = (row, col) => {\r\n  //   if (isMouseDown.isDown) {\r\n  //     if (isMouseDown.node === 'start') {\r\n  //       setSTART_NODE({row, col});    \r\n  //     }\r\n  //     if (isMouseDown.node === 'finish') {\r\n  //       setFINISH_NODE({row,col});\r\n  //     };\r\n  //   }\r\n  // };\r\n\r\n  const Nodes =\r\n    grid.length > 0\r\n      ? grid.map((row, rowIdx) => {\r\n          return row.map((node, nodeIdx) => {\r\n            const { row, col, isFinish, isStart, isWall } = node;\r\n            return (\r\n              <Node\r\n                onMouseDown={() => handleMouseDown(row, col, isStart, isFinish)}\r\n                onMouseUp={() => handleMouseUp(row, col)}\r\n                // onMouseEnter={() =>\r\n                //   handleMouseEnter(row, col)\r\n                // }\r\n                key={nodeIdx}\r\n                row={row}\r\n                col={col}\r\n                isFinish={isFinish}\r\n                isStart={isStart}\r\n                isWall={isWall}\r\n              />\r\n            );\r\n          });\r\n        })\r\n      : null;\r\n\r\n  const renderRows = Nodes\r\n    ? Nodes.map((row, idx) => {\r\n        return (\r\n          <div className=\"row\" key={idx}>\r\n            {row}\r\n          </div>\r\n        );\r\n      })\r\n    : null;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"nav-bar\">\r\n        <span className=\"start-button\" onClick={calculateDijkstra}>\r\n          Visualize Dijkstra's Algorithm\r\n        </span>\r\n      </div>\r\n      <div className=\"grid\">{renderRows}</div>\r\n      {algoRunning ? null : <span onClick={resetGrid}>Reset</span>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Pathfinder;\r\n","import React from \"react\";\r\n\r\nconst Navbar = props => {\r\n  return (\r\n    <div id=\"nav-bar\">\r\n      <div id=\"nav-title\">\r\n        <h1>Algo Visualizer</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport Pathfinder from './components/Pathfinder.jsx';\r\nimport Navbar from './components/Navbar.jsx';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar />\r\n      <Pathfinder />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}