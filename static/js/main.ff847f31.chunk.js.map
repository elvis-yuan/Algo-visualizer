{"version":3,"sources":["components/Node.jsx","algorithms/dijkstra.js","components/Navbar.jsx","components/Footer.jsx","components/Pathfinder.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","isFinish","isStart","row","col","onMouseDown","onMouseUp","onMouseEnter","isWall","nodeType","nodeIcon","className","id","isFinished","dijkstra","grid","startNode","finishNode","visitedNodeOrder","distance","unvisitedNodes","nodes","node","push","getNodes","length","sortNodesByDistance","closestNode","pop","Infinity","visited","updateUnvisitedNeighbors","sort","currentNode","nextNode","unvisitedNeighborNodes","neighbors","filter","neighbor","unvisitedNeighbors","previousNode","Navbar","calculateDijkstra","resetGrid","algoRunning","onClick","Footer","Pathfinder","useState","setGrid","setRunning","algoFinished","setFinished","isDown","isMouseDown","setMouseDown","START_NODE","setSTART_NODE","FINISH_NODE","setFINISH_NODE","useEffect","createGrid","createNode","currentRow","animateDijkstra","visitedNodePath","nodesShortestPath","i","setTimeout","animateShortestPath","document","getElementById","classList","add","toggleWalls","newGrid","slice","newNode","Nodes","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","key","renderRows","idx","shortestPathNodes","reverse","shortestPath","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAgDeA,MA9Cf,SAAcC,GAAQ,IAElBC,EAQED,EARFC,SACAC,EAOEF,EAPFE,QACAC,EAMEH,EANFG,IACAC,EAKEJ,EALFI,IACAC,EAIEL,EAJFK,YACAC,EAGEN,EAHFM,UACAC,EAEEP,EAFFO,aACAC,EACER,EADFQ,OAGIC,EAAWR,EACb,eACAC,EACA,cACAM,EACA,aACA,GACEE,EAAWT,EACf,8BACE,uBAAGU,UAAU,iBAEbT,EACF,8BACE,uBAAGS,UAAU,iBAGf,GAGF,OACE,yBACEA,UAAS,cAASF,GAClBG,GAAE,UAAKT,EAAL,YAAYC,GACdC,YAAa,SAACF,EAAKC,EAAKS,EAAYX,GAAvB,OACXG,EAAYF,EAAKC,EAAKS,EAAYX,IAEpCI,UAAW,SAACH,EAAKC,GAAN,OAAcE,EAAUH,EAAKC,IACxCG,aAAc,SAACJ,EAAKC,GAAN,OAAcG,EAAaJ,EAAKC,KAE7CM,IC1CA,SAASI,EAASC,EAAMC,EAAWC,GACxC,IAAMC,EAAmB,GACzBF,EAAUG,SAAW,EAErB,IADA,IAAMC,EAaR,SAAkBL,GAChB,IAAMM,EAAQ,GADQ,uBAEtB,YAAgBN,EAAhB,+CAAsB,CAAC,IAAdZ,EAAa,+BACpB,YAAiBA,EAAjB,+CAAsB,CAAC,IAAdmB,EAAa,QACpBD,EAAME,KAAKD,IAFO,oFAFA,kFAOtB,OAAOD,EApBgBG,CAAST,GACvBK,EAAeK,QAAQ,CAC9BC,EAAoBN,GACpB,IAAMO,EAAcP,EAAeQ,MACnC,IAAID,EAAYnB,OAAhB,CACA,GAAImB,EAAYR,WAAaU,IAAU,OAAOX,EAG9C,GAFAS,EAAYG,SAAU,EACtBZ,EAAiBK,KAAKI,GAClBA,IAAgBV,EAAY,OAAOC,EACvCa,EAAyBJ,EAAaZ,KAe1C,SAASW,EAAoBN,GAC3BA,EAAeY,MAAK,SAACC,EAAaC,GAAd,OAA2BA,EAASf,SAAWc,EAAYd,YAIjF,SAASY,EAAyBT,EAAMP,GACtC,IAAMoB,EAUR,SAA4Bb,EAAMP,GAChC,IAAMqB,EAAY,GACVhC,EAAakB,EAAblB,IAAKD,EAAQmB,EAARnB,IAETA,EAAM,GAAGiC,EAAUb,KAAKR,EAAKZ,EAAM,GAAGC,IACtCD,EAAMY,EAAKU,OAAS,GAAGW,EAAUb,KAAKR,EAAKZ,EAAM,GAAGC,IACpDA,EAAM,GAAGgC,EAAUb,KAAKR,EAAKZ,GAAKC,EAAM,IACxCA,EAAMW,EAAK,GAAGU,OAAS,GAAGW,EAAUb,KAAKR,EAAKZ,GAAKC,EAAM,IAE7D,OAAOgC,EAAUC,QAAO,SAAAC,GAAQ,OAAKA,EAASR,WAnBfS,CAAmBjB,EAAMP,GADZ,uBAE5C,YAAqBoB,EAArB,+CAA6C,CAAC,IAArCG,EAAoC,QAC3CA,EAASnB,SAAWG,EAAKH,SAAW,EACpCmB,EAASE,aAAelB,GAJkB,mFC/B9C,IAiBemB,EAjBA,SAAAzC,GAAU,IACf0C,EAA8C1C,EAA9C0C,kBAAmBC,EAA2B3C,EAA3B2C,UAAWC,EAAgB5C,EAAhB4C,YACtC,OACE,yBAAKjC,UAAU,WACb,uBAAGA,UAAU,cAAb,mBACA,0BAAMA,UAAU,eAAekC,QAASH,GACtC,8DAEDE,EAAc,KACb,0BAAMjC,UAAU,eAAekC,QAASF,GAAxC,WCLOG,EAJA,SAAA9C,GACb,OAAO,yBAAKY,GAAG,Y,oOCKjB,IA6KemC,EA7KI,SAAA/C,GAAU,IAAD,EACFgD,mBAAS,IADP,mBACnBjC,EADmB,KACbkC,EADa,OAEQD,oBAAS,GAFjB,mBAEnBJ,EAFmB,KAENM,EAFM,OAGUF,oBAAS,GAHnB,mBAGnBG,EAHmB,KAGLC,EAHK,OAIUJ,mBAAS,CAAE1B,KAAM,KAAM+B,QAAQ,IAJzC,mBAInBC,EAJmB,KAINC,EAJM,OAMUP,mBAAS,CAAE7C,IAAK,GAAIC,IAAK,IANnC,mBAMnBoD,EANmB,KAMPC,EANO,OAOYT,mBAAS,CAAE7C,IAAK,GAAIC,IAAK,KAPrC,mBAOnBsD,EAPmB,KAONC,EAPM,KAS1BC,qBAAU,WACRC,MACC,CAACL,EAAYE,IAEhB,IAAMI,EAAa,SAAC3D,EAAKC,GACvB,MAAO,CACLA,MACAD,MACAD,QAASC,IAAQqD,EAAWrD,KAAOC,IAAQoD,EAAWpD,IACtDH,SAAUE,IAAQuD,EAAYvD,KAAOC,IAAQsD,EAAYtD,IACzDe,SAAUU,IACVC,SAAS,EACTtB,QAAQ,EACRgC,aAAc,OAIZqB,EAAa,WAEjB,IADA,IAAMxC,EAAQ,GACLlB,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAEjC,IADA,IAAI4D,EAAa,GACR3D,EAAM,EAAGA,EAAM,GAAIA,IAC1B2D,EAAWxC,KAAKuC,EAAW3D,EAAKC,IAElCiB,EAAME,KAAKwC,GAEbd,EAAQ5B,IAsBJ2C,EAAkB,SAACC,EAAiBC,GACxC,IAD+D,IAAD,WACrDC,GACP,GAAIA,IAAMF,EAAgBxC,OAIxB,OAHA2C,YAAW,WACTC,EAAoBH,KACnB,GAAKC,GACF,CAAN,UAEFC,YAAW,WAAO,IAAD,EACMH,EAAgBE,GAA7BhE,EADO,EACPA,IAAKC,EADE,EACFA,IACbkE,SAASC,eAAT,UAA2BpE,EAA3B,YAAkCC,IAAOoE,UAAUC,IAAI,kBACtD,GAAKN,IAVDA,EAAI,EAAGA,GAAKF,EAAgBxC,OAAQ0C,IAAK,CAAC,IAAD,IAAzCA,GAAyC,oCAc9CE,EAAsB,SAAAH,GAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAkBzC,OAAQ0C,IAAK,CAAC,IAAD,EAC5BD,EAAkBC,GAA/BhE,EADyC,EACzCA,IAAKC,EADoC,EACpCA,IACbkE,SAASC,eAAT,UAA2BpE,EAA3B,YAAkCC,IAAOoE,UAAUC,IAAI,iBACvDvB,GAAW,KAITwB,EAAc,SAACvE,EAAKC,GACxB,IAAMkB,EAAOP,EAAKZ,GAAKC,GACjBuE,EAAU5D,EAAK6D,QACjBC,E,yVAAO,IAAQvD,GAKnB,OAJKA,EAAKpB,SAAYoB,EAAKrB,WACzB4E,EAAQrE,QAAUc,EAAKd,QAEzBmE,EAAQxE,GAAKC,GAAOyE,EACbF,GAwCHG,EACJ/D,EAAKU,OAAS,EACVV,EAAKgE,KAAI,SAAC5E,EAAK6E,GACb,OAAO7E,EAAI4E,KAAI,SAACzD,EAAM2D,GAAa,IACzB9E,EAAwCmB,EAAxCnB,IAAKC,EAAmCkB,EAAnClB,IAAKH,EAA8BqB,EAA9BrB,SAAUC,EAAoBoB,EAApBpB,QAASM,EAAWc,EAAXd,OACrC,OACE,kBAAC,EAAD,CACEH,YAAa,kBA5CH,SAACF,EAAKC,EAAKF,EAASD,EAAUO,GACpD,IAAK2C,EACH,GAAIjD,EACFqD,EAAa,CAAEjC,KAAM,QAAS+B,QAAQ,SACjC,GAAIpD,EACTsD,EAAa,CAAEjC,KAAM,SAAU+B,QAAQ,QAClC,CACL,IAAMsB,EAAUD,EAAYvE,EAAKC,GACjC6C,EAAQ0B,GACRpB,EAAa,CAAEjC,KAAM,OAAQ+B,QAAQ,KAmCV6B,CAAgB/E,EAAKC,EAAKF,EAASD,IACtDK,UAAW,WA9BvBiD,EAAa,CAAEjC,KAAM,KAAM+B,QAAQ,KA+BvB9C,aAAc,kBA5BH,SAACJ,EAAKC,GAC7B,GAAIkD,EAAYD,OACd,OAAQC,EAAYhC,MAClB,IAAK,QACHmC,EAAc,CAAEtD,MAAKC,QACrB,MACF,IAAK,SACHuD,EAAe,CAAExD,MAAKC,QACtB,MACF,IAAK,OACH,IAAMuE,EAAUD,EAAYvE,EAAKC,GACjC6C,EAAQ0B,IAiBkBQ,CAAiBhF,EAAKC,IAC1CgF,IAAKH,EACL9E,IAAKA,EACLC,IAAKA,EACLH,SAAUA,EACVC,QAASA,EACTM,OAAQA,UAKhB,KAEA6E,EAAaP,EACfA,EAAMC,KAAI,SAAC5E,EAAKmF,GACd,OACE,yBAAK3E,UAAU,MAAMyE,IAAKE,GACvBnF,MAIP,KAEJ,OACE,oCACE,kBAAC,EAAD,CACEuC,kBAtHoB,WACxB,IAAKS,EAAc,CACjBD,GAAW,GACXE,GAAY,GACZ,IAAMpC,EAAYD,EAAKyC,EAAWrD,KAAKqD,EAAWpD,KAC5Ca,EAAaF,EAAK2C,EAAYvD,KAAKuD,EAAYtD,KAC/C6D,EAAkBnD,EAASC,EAAMC,EAAWC,GAC5CiD,EHJL,SAAsBjD,GAG3B,IAFA,IAAMsE,EAAoB,GACtBtD,EAAchB,EACK,OAAhBgB,GACLsD,EAAkBhE,KAAKU,GACvBA,EAAcA,EAAYO,aAG5B,OAAO+C,EAAkBC,UGJKC,CAAaxE,GACvC+C,EAAgBC,EAAiBC,KA+G/BvB,UA9HY,WAChBM,EAAQ,IACRC,GAAW,GACXE,GAAY,GACZgB,YAAW,kBAAMP,MAAc,IA2H3BjB,YAAaA,IAEf,yBAAKjC,UAAU,QAAQ0E,GACvB,kBAAC,EAAD,Q,MCnKSK,MARf,WACE,OACE,yBAAK/E,UAAU,OACb,kBAAC,EAAD,QCIcgF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3B,SAASC,eAAe,SD2H3C,kBAAmB2B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ff847f31.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Node(props) {\n  const {\n    isFinish,\n    isStart,\n    row,\n    col,\n    onMouseDown,\n    onMouseUp,\n    onMouseEnter,\n    isWall\n  } = props;\n\n  const nodeType = isFinish\n    ? \" finish-node\"\n    : isStart\n    ? \" start-node\"\n    : isWall\n    ? \" wall-node\"\n    : \"\";\n  const nodeIcon = isFinish ? (\n    <span>\n      <i className=\"fas fa-flag\"></i>\n    </span>\n  ) : isStart ? (\n    <span>\n      <i className=\"fas fa-star\"></i>\n    </span>\n  ) : (\n    \"\"\n  );\n\n  return (\n    <div\n      className={`node${nodeType}`}\n      id={`${row}-${col}`}\n      onMouseDown={(row, col, isFinished, isStart) =>\n        onMouseDown(row, col, isFinished, isStart)\n      }\n      onMouseUp={(row, col) => onMouseUp(row, col)}\n      onMouseEnter={(row, col) => onMouseEnter(row, col)}\n    >\n      {nodeIcon}\n    </div>\n  );\n}\n\nexport default Node;\n","//start node has a distance of 0 all other nodes are set to infinity\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodeOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.pop();\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) return visitedNodeOrder;\n    closestNode.visited = true;\n    visitedNodeOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodeOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction getNodes(grid) {\n  const nodes = [];\n  for (let row of grid) {\n    for (let node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n//return all unvisited nodes in order of closest distance\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((currentNode, nextNode) => nextNode.distance - currentNode.distance)\n}\n\n//increment each neighboring node by 1 and set their previous node to current node\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighborNodes = unvisitedNeighbors(node, grid);\n  for (let neighbor of unvisitedNeighborNodes) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\n\n//find all neighboring nodes from given node\n//return only those that have not been visited\nfunction unvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1])\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n\n  return neighbors.filter(neighbor => !neighbor.visited);\n}\n\nexport function shortestPath(finishNode) {\n  const shortestPathNodes = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    shortestPathNodes.push(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return shortestPathNodes.reverse();\n}","import React from \"react\";\n\nconst Navbar = props => {\n  const { calculateDijkstra, resetGrid, algoRunning } = props;\n  return (\n    <div className=\"nav-bar\">\n      <p className=\"nav-header\">ALGO-VISUALIZER</p>\n      <span className=\"start-button\" onClick={calculateDijkstra}>\n        <p>Visualize Dijkstra's Algorithm</p>\n      </span>\n      {algoRunning ? null : (\n        <span className=\"reset-button\" onClick={resetGrid}>\n          Reset\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nconst Footer = props => {\n  return <div id=\"footer\"></div>;\n};\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport Node from \"./Node\";\nimport { dijkstra, shortestPath } from \"../algorithms/dijkstra.js\";\nimport Navbar from \"./Navbar.jsx\";\nimport Footer from \"./Footer.jsx\";\n\nimport \"./pathfinder.css\";\n\nconst Pathfinder = props => {\n  const [grid, setGrid] = useState([]);\n  const [algoRunning, setRunning] = useState(true);\n  const [algoFinished, setFinished] = useState(false);\n  const [isMouseDown, setMouseDown] = useState({ node: null, isDown: false });\n\n  const [START_NODE, setSTART_NODE] = useState({ row: 10, col: 9 });\n  const [FINISH_NODE, setFINISH_NODE] = useState({ row: 10, col: 40 });\n\n  useEffect(() => {\n    createGrid();\n  }, [START_NODE, FINISH_NODE]);\n\n  const createNode = (row, col) => {\n    return {\n      col,\n      row,\n      isStart: row === START_NODE.row && col === START_NODE.col,\n      isFinish: row === FINISH_NODE.row && col === FINISH_NODE.col,\n      distance: Infinity,\n      visited: false,\n      isWall: false,\n      previousNode: null\n    };\n  };\n\n  const createGrid = () => {\n    const nodes = [];\n    for (let row = 0; row < 20; row++) {\n      let currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(createNode(row, col));\n      }\n      nodes.push(currentRow);\n    }\n    setGrid(nodes);\n  };\n\n  const resetGrid = () => {\n    setGrid([]);\n    setRunning(true);\n    setFinished(false);\n    setTimeout(() => createGrid(), 0);\n  };\n\n  const calculateDijkstra = () => {\n    if (!algoFinished) {\n      setRunning(true);\n      setFinished(true);\n      const startNode = grid[START_NODE.row][START_NODE.col];\n      const finishNode = grid[FINISH_NODE.row][FINISH_NODE.col];\n      const visitedNodePath = dijkstra(grid, startNode, finishNode);\n      const nodesShortestPath = shortestPath(finishNode);\n      animateDijkstra(visitedNodePath, nodesShortestPath);\n    }\n  };\n\n  const animateDijkstra = (visitedNodePath, nodesShortestPath) => {\n    for (let i = 0; i <= visitedNodePath.length; i++) {\n      if (i === visitedNodePath.length) {\n        setTimeout(() => {\n          animateShortestPath(nodesShortestPath);\n        }, 12 * i);\n        return;\n      }\n      setTimeout(() => {\n        const { row, col } = visitedNodePath[i];\n        document.getElementById(`${row}-${col}`).classList.add(\"visited-node\");\n      }, 12 * i);\n    }\n  };\n\n  const animateShortestPath = nodesShortestPath => {\n    for (let i = 0; i < nodesShortestPath.length; i++) {\n      const { row, col } = nodesShortestPath[i];\n      document.getElementById(`${row}-${col}`).classList.add(\"shortest-path\");\n      setRunning(false);\n    }\n  };\n\n  const toggleWalls = (row, col) => {\n    const node = grid[row][col];\n    const newGrid = grid.slice();\n    let newNode = { ...node };\n    if (!node.isStart && !node.isFinish) {\n      newNode.isWall = !node.isWall;\n    }\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const handleMouseDown = (row, col, isStart, isFinish, isWall) => {\n    if (!algoFinished) {\n      if (isStart) {\n        setMouseDown({ node: \"start\", isDown: true });\n      } else if (isFinish) {\n        setMouseDown({ node: \"finish\", isDown: true });\n      } else {\n        const newGrid = toggleWalls(row, col);\n        setGrid(newGrid);\n        setMouseDown({ node: \"wall\", isDown: true });\n      }\n    }\n  };\n\n  const handleMouseUp = (row, col) => {\n    setMouseDown({ node: null, isDown: false });\n  };\n\n  const handleMouseEnter = (row, col) => {\n    if (isMouseDown.isDown) {\n      switch (isMouseDown.node) {\n        case \"start\":\n          setSTART_NODE({ row, col });\n          break;\n        case \"finish\":\n          setFINISH_NODE({ row, col });\n          break;\n        case \"wall\":\n          const newGrid = toggleWalls(row, col);\n          setGrid(newGrid);\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  const Nodes =\n    grid.length > 0\n      ? grid.map((row, rowIdx) => {\n          return row.map((node, nodeIdx) => {\n            const { row, col, isFinish, isStart, isWall } = node;\n            return (\n              <Node\n                onMouseDown={() => handleMouseDown(row, col, isStart, isFinish)}\n                onMouseUp={() => handleMouseUp(row, col)}\n                onMouseEnter={() => handleMouseEnter(row, col)}\n                key={nodeIdx}\n                row={row}\n                col={col}\n                isFinish={isFinish}\n                isStart={isStart}\n                isWall={isWall}\n              />\n            );\n          });\n        })\n      : null;\n\n  const renderRows = Nodes\n    ? Nodes.map((row, idx) => {\n        return (\n          <div className=\"row\" key={idx}>\n            {row}\n          </div>\n        );\n      })\n    : null;\n\n  return (\n    <>\n      <Navbar\n        calculateDijkstra={calculateDijkstra}\n        resetGrid={resetGrid}\n        algoRunning={algoRunning}\n      />\n      <div className=\"grid\">{renderRows}</div>\n      <Footer />\n    </>\n  );\n};\n\nexport default Pathfinder;\n","import React from 'react';\nimport Pathfinder from './components/Pathfinder.jsx';\nimport Navbar from './components/Navbar.jsx';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pathfinder />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}