{"version":3,"sources":["components/Node.jsx","algorithms/dijkstra.js","components/Pathfinder.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","isFinish","isStart","row","col","nodeType","className","id","dijkstra","grid","startNode","finishNode","visitedNodeOrder","distance","unvisitedNodes","nodes","node","push","getNodes","length","sortNodesByDistance","closestNode","pop","Infinity","visited","updateUnvisitedNeighbors","sort","currentNode","nextNode","unvisitedNeighborNodes","neighbors","filter","neighbor","unvisitedNeighbors","previousNode","Pathfinder","useState","setGrid","START_NODE","FINISH_NODE","useEffect","currentRow","createNode","isWall","animateDijkstra","visitedNodePath","nodesShortestPath","i","setTimeout","animateShortestPath","document","getElementById","classList","add","Nodes","map","rowIdx","nodeIdx","key","renderRows","idx","onClick","shortestPathNodes","reverse","shortestPath","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1cc8016e.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Node(props) {\n  const { isFinish, isStart, row, col } = props;\n  const nodeType = isFinish ? \" finish-node\" : isStart ? \" start-node\" : \"\";\n  return <div className={`node${nodeType}`} id={`${row}-${col}`}></div>;\n}\n\nexport default Node;\n","//start node has a distance of 0 all other nodes are set to infinity\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodeOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.pop();\n    if (closestNode.distance === Infinity) return visitedNodeOrder;\n    closestNode.visited = true;\n    visitedNodeOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodeOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction getNodes(grid) {\n  const nodes = [];\n  for (let row of grid) {\n    for (let node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n//return all unvisited nodes in order of closest distance\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((currentNode, nextNode) => nextNode.distance - currentNode.distance)\n}\n\n//increment each neighboring node by 1 and set their previous node to current node\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighborNodes = unvisitedNeighbors(node, grid);\n  for (let neighbor of unvisitedNeighborNodes) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\n\n//find all neighboring nodes from given node\n//return only those that have not been visited\nfunction unvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1])\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n\n  return neighbors.filter(neighbor => !neighbor.visited);\n}\n\nexport function shortestPath(finishNode) {\n  const shortestPathNodes = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    shortestPathNodes.push(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return shortestPathNodes.reverse();\n}","import React, { useState, useEffect } from \"react\";\nimport Node from \"./Node\";\nimport { dijkstra, shortestPath } from \"../algorithms/dijkstra.js\";\n\nimport \"./pathfinder.css\";\n\nconst Pathfinder = props => {\n  const [grid, setGrid] = useState([]);\n  // const [isMouseDown, setMouseDown] = useState(false);\n\n  const START_NODE = { row: 10, col: 9 };\n  const FINISH_NODE = { row: 10, col: 40 };\n\n  useEffect(() => {\n    const nodes = [];\n    for (let row = 0; row < 20; row++) {\n      let currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(createNode(row, col));\n      }\n      nodes.push(currentRow);\n    }\n    setGrid(nodes);\n  }, []);\n\n  // const changeStartLocation = (row, col) => {\n  //   START_NODE.row = row;\n  //   START_NODE.col = col;\n  // };\n\n  // const changeFinishLocation = (row, col) => {\n  //   FINISH_NODE.row = row;\n  //   FINISH_NODE.col = col;\n  // };\n\n  const createNode = (row, col) => {\n    return {\n      col,\n      row,\n      isStart: row === START_NODE.row && col === START_NODE.col,\n      isFinish: row === FINISH_NODE.row && col === FINISH_NODE.col,\n      distance: Infinity,\n      visited: false,\n      isWall: false,\n      previousNode: null\n    };\n  };\n\n  // const createGrid = () => {\n  //   const nodes = [];\n  //   for (let row = 0; row < 20; row++) {\n  //     let currentRow = [];\n  //     for (let col = 0; col < 50; col++) {\n  //       currentRow.push(createNode(row, col));\n  //     }\n  //     nodes.push(currentRow);\n  //   }\n  //   setGrid(nodes);\n  // };\n\n  // const resetGrid = () => {\n  //   setGrid([]);\n  //   const nodes = [];\n  //   for (let row = 0; row < 20; row++) {\n  //     let currentRow = [];\n  //     for (let col = 0; col < 50; col++) {\n  //       currentRow.push(createNode(row, col));\n  //     }\n  //     nodes.push(currentRow);\n  //   }\n  //   setGrid(nodes);\n  // };\n\n  const calculateDijkstra = () => {\n    const startNode = grid[START_NODE.row][START_NODE.col];\n    const finishNode = grid[FINISH_NODE.row][FINISH_NODE.col];\n    const visitedNodePath = dijkstra(grid, startNode, finishNode);\n    const nodesShortestPath = shortestPath(finishNode);\n    animateDijkstra(visitedNodePath, nodesShortestPath);\n  };\n\n  const animateDijkstra = (visitedNodePath, nodesShortestPath) => {\n    for (let i = 0; i <= visitedNodePath.length; i++) {\n      if (i === visitedNodePath.length) {\n        setTimeout(() => {\n          animateShortestPath(nodesShortestPath);\n        }, 12 * i);\n        return;\n      }\n      setTimeout(() => {\n        const { row, col } = visitedNodePath[i];\n        document.getElementById(`${row}-${col}`).classList.add(\"visited-node\");\n      }, 12 * i);\n    }\n  };\n\n  const animateShortestPath = nodesShortestPath => {\n    for (let i = 0; i < nodesShortestPath.length; i++) {\n      const { row, col } = nodesShortestPath[i];\n      document.getElementById(`${row}-${col}`).classList.add(\"shortest-path\");\n    }\n  };\n\n  // const handleMouseDown = (row, col, isStart, isFinish) => {\n  //   debugger;\n  //   if (isStart || isFinish) setMouseDown(true);\n  //   console.log(\"mouse is down\");\n  // };\n\n  // const handleClick = () => {\n  //   console.log(\"testing\");\n  // };\n\n  // const handleMouseUp = (row, col, isStart, isFinish) => {\n  //   if (isMouseDown) {\n  //     if (isStart) changeStartLocation(row, col);\n  //     if (isFinish) changeFinishLocation(row, col);\n  //     setMouseDown(false);\n  //   }\n  // };\n\n  // const handleMouseEnter = (row, col, isStart, isFinish) => {\n  //   if (isMouseDown) {\n  //   }\n  // };\n\n  const Nodes =\n    grid.length > 0\n      ? grid.map((row, rowIdx) => {\n          return row.map((node, nodeIdx) => {\n            const { row, col, isFinish, isStart, isWall } = node;\n            return (\n              <Node\n                // onClick={handleClick}\n                // onMouseDown={() => handleMouseDown(row, col, isStart, isFinish)}\n                // onMouseUp={() => handleMouseUp(row, col, isStart, isFinish)}\n                // onMouseEnter={() =>\n                //   handleMouseEnter(row, col, isStart, isFinish)\n                // }\n                key={nodeIdx}\n                row={row}\n                col={col}\n                isFinish={isFinish}\n                isStart={isStart}\n                isWall={isWall}\n                // isMouseDown={isMouseDown}\n              />\n            );\n          });\n        })\n      : null;\n\n  const renderRows = Nodes\n    ? Nodes.map((row, idx) => {\n        return (\n          <div className=\"row\" key={idx}>\n            {row}\n          </div>\n        );\n      })\n    : null;\n\n  return (\n    <>\n      <div className=\"nav-bar\">\n        <span className=\"start-button\" onClick={calculateDijkstra}>\n          Visualize Dijkstra's Algorithm\n        </span>\n      </div>\n      <div className=\"grid\">{renderRows}</div>\n      {/* <span onClick={resetGrid}>Reset</span> */}\n    </>\n  );\n};\n\nexport default Pathfinder;\n","import React from 'react';\nimport Pathfinder from './components/Pathfinder.jsx'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pathfinder />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}